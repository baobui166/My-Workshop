[{"uri":"https://baobui166.github.io/My-Workshop/vi/3-observability/3.1-preparation/","title":"Chuẩn bị","tags":[],"description":"","content":"Chuẩn bị Việc bật và chỉnh sửa logs (nhật ký) và tracing (theo dõi truy vết) trong API Gateway (REST API) giúp bạn dễ dàng giám sát, debug và phân tích hành vi ứng dụng.\nMục tiêu: Bật Access Logs để theo dõi các request/response chi tiết. Bật Execution Logs để theo dõi quá trình xử lý (với REST API). Bật X-Ray Tracing để theo dõi luồng request qua các dịch vụ AWS như API Gateway → Lambda → DynamoDB. Các bước thực hiện: 1. Truy cập API Gateway Đăng nhập AWS Console: https://console.aws.amazon.com/ Gõ “API Gateway” vào thanh tìm kiếm, chọn dịch vụ. 2. Chọn API bạn muốn theo dõi Vào API Gateway → Chọn API bạn đang sử dụng Điều hướng đến Stages → chọn stage (ví dụ: dev, prod) Nhấn Edit trong phần Logs and Tracing 3. Tích các tùy chọn sau: Errors and info logs: Ghi lại cả lỗi và thông tin request/response (nên bật khi debug). Data tracing: Ghi lại toàn bộ request và response payload. Detailed metrics: Bật ghi số liệu chi tiết về API vào CloudWatch Metrics: count, latency, 4XX, 5XX. X-Ray tracing: Bật AWS X-Ray để trace toàn bộ luồng request. Bước tiếp theo: phân tích API với CloudWatch Metrics, Logs Insight, Alarm, Dashboard và X-Ray.\n"},{"uri":"https://baobui166.github.io/My-Workshop/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Trước khi bắt tay vào triển khai một giải pháp giám sát API hoàn chỉnh, bạn cần hiểu rõ các khái niệm cốt lõi về Giám sát Serverless (Serverless Monitoring) và cách các công cụ quan sát của AWS tích hợp trơn tru vào môi trường không máy chủ (serverless).\nGiám sát \u0026amp; Quan sát Serverless Các ứng dụng serverless tuy giúp loại bỏ gánh nặng quản lý hạ tầng, nhưng lại mang đến nhiều thách thức mới trong việc theo dõi, gỡ lỗi và đảm bảo SLA. AWS cung cấp bộ công cụ mạnh mẽ giúp:\nTheo dõi hiệu suất Truy vết (trace) chi tiết luồng xử lý Cảnh báo tức thì khi có sự cố Tất cả đều được thực hiện mà không cần quản lý máy chủ.\nCác dịch vụ AWS được sử dụng Trong dự án này, chúng ta sẽ xây dựng một hệ thống giám sát API end-to-end trên nền tảng serverless, sử dụng các dịch vụ sau:\nXử lý: AWS Lambda Quản lý API: Amazon API Gateway Cơ sở dữ liệu: Amazon DynamoDB Giám sát \u0026amp; Quan sát: Amazon CloudWatch Logs: ghi log tập trung CloudWatch Metrics: theo dõi độ trễ, lưu lượng, lỗi CloudWatch Alarms + SNS: cảnh báo theo thời gian thực AWS X-Ray: truy vết phân tán và phân tích hiệu suất Giới thiệu về AWS Lambda AWS Lambda cho phép bạn chạy logic backend mà không cần quản lý server. Lambda hỗ trợ:\nTự động scale và khả dụng cao Tích hợp liền mạch với API Gateway \u0026amp; CloudWatch Kích hoạt theo sự kiện với cấu hình bộ nhớ và thời gian thực thi linh hoạt Thực hành triển khai Trong workshop này, bạn sẽ được hướng dẫn xây dựng hệ thống giám sát serverless từ đầu, bao gồm:\nTạo API sử dụng Lambda và API Gateway\nGhi log và theo dõi hiệu suất bằng CloudWatch Logs \u0026amp; Metrics\nTạo cảnh báo với CloudWatch Alarms \u0026amp; SNS\nBật X-Ray để truy vết toàn bộ luồng xử lý và tìm lỗi gốc\nTrực quan hóa dữ liệu để theo dõi liên tục\nViết tài liệu cơ bản cho các API đã giám sát\nKết quả: Sau workshop, bạn sẽ sở hữu hệ thống API serverless được giám sát đầy đủ, tự động cảnh báo và có khả năng phân tích lỗi phân tán, hoàn toàn sử dụng các dịch vụ gốc của AWS.\n"},{"uri":"https://baobui166.github.io/My-Workshop/vi/","title":"Session Management","tags":[],"description":"","content":"Làm việc với Amazon System Manager - Session Manager Tổng quan Trong thời đại các ứng dụng hiện đại đòi hỏi sự phản hồi nhanh chóng và khả năng mở rộng linh hoạt, việc giám sát và theo dõi hoạt động của API đóng vai trò then chốt trong việc đảm bảo chất lượng dịch vụ (SLA), hiệu năng hệ thống và phát hiện sớm các sự cố. Workshop này được xây dựng nhằm hướng dẫn từng bước cách triển khai một hệ thống API Monitoring toàn diện trên nền tảng Serverless AWS, kết hợp giữa các dịch vụ chủ lực như AWS Lambda, API Gateway và DynamoDB, đồng thời tích hợp các công cụ giám sát như CloudWatch Logs, CloudWatch Metrics, CloudWatch Alarms, SNS và AWS X-Ray để:\nTheo dõi hiệu năng thực thi của từng API endpoint.\nPhân tích lỗi chi tiết ở từng tầng xử lý.\nCảnh báo theo thời gian thực khi vượt ngưỡng hiệu năng hoặc xảy ra lỗi nghiêm trọng.\nĐảm bảo tuân thủ các chỉ số SLA đặt ra.\nTự động hóa việc ghi nhận và phân tích log, giúp tối ưu hóa quy trình vận hành.\nNội dung Giới thiệu Các bước chuẩn bị Observability Tracing Documentation Dọn dẹp tài nguyên "},{"uri":"https://baobui166.github.io/My-Workshop/vi/2-preparation/2.1-createdyanmodb/","title":"Tạo DynamoDB","tags":[],"description":"","content":"Tạo bảng DynamoDB Trong hệ thống giám sát API, chúng ta sẽ sử dụng Amazon DynamoDB như một cơ sở dữ liệu NoSQL để lưu trữ các thông tin như log người dùng, truy vấn API hoặc các dữ liệu cần theo dõi theo thời gian thực.\nMục tiêu của bước này:\nTạo bảng DynamoDB dùng trong quá trình triển khai Lambda. Cấu hình khóa chính và các thiết lập cơ bản. Các bước thực hiện:\nĐăng nhập vào AWS Console: Truy cập: AWS console Chọn đúng vùng miền (ví dụ: us-east-1 hoặc ap-southeast-1). Truy cập dịch vụ DynamoDB: Tìm kiếm DynamoDB trong thanh tìm kiếm và chọn dịch vụ. Tạo bảng mới: Nhấn nút \u0026ldquo;Create table\u0026rdquo;. Nhập thông tin bảng: Tên bảng: WebsiteVisitors (hoặc tên bạn muốn)\nKhóa phân vùng (Partition key): userKey\nKiểu dữ liệu: String\n(Tuỳ chọn) Bạn có thể thêm khóa sắp xếp (Sort key) để tổ chức dữ liệu theo thời gian hoặc endpoint.\nVí dụ: timestamp - Number Tạo bảng: Cuối cùng, nhấn \u0026ldquo;Create table\u0026rdquo; để hoàn tất. Xác nhận bảng đã được tạo thành công: Tiếp theo, chúng ta sẽ tạo Lambda Functions.\n"},{"uri":"https://baobui166.github.io/My-Workshop/vi/3-observability/3.2-cloudwatch/3.2.1-cloudwatchlogs/","title":"Theo dõi các log của 1 lambda function","tags":[],"description":"","content":"Theo dõi các log của 1 lambda function. Truy cập Lambda function Vào AWS Console Vào dịch vụ Lambda Chọn function bạn muốn xem log Chọn tab \u0026ldquo;Monitor\u0026rdquo;. Trong giao diện Lambda function → chọn tab Monitor Bấm vào mục View Cloudwatch Log Xem log chi tiết Sau khi chuyển sang màn hình Log events thì chọn vào log stream mới nhất (theo thời gian) Tại đây bạn sẽ thấy log như: Phân tích: INIT_START: Xuất hiện khi Lambda khởi động lần đầu (cold start), hiển thị: Runtime version đang dùng (Python 3.11), ARN của runtime thực tế. Không xuất hiện mỗi lần gọi – chỉ khi tạo container mới START: Báo hiệu Lambda function bắt đầu xử lý một request mới, gồm: RequestId: Mã duy nhất cho mỗi lần gọi, Version: Phiên bản Lambda đang chạy ($LATEST là mặc định). END: Thông báo Lambda function đã kết thúc xử lý request, cùng RequestId với START REPORT: Thông báo hiệu năng: Duration: Thời gian thực thi thực tế (490.34 ms), Billed Duration: AWS làm tròn lên (491 ms → tính tiền theo bội số 1 ms), Memory Size: Bộ nhớ cấu hình cho function (128 MB), Max Memory Used: Bộ nhớ thực tế Lambda dùng trong lần gọi đó (58 MB). "},{"uri":"https://baobui166.github.io/My-Workshop/vi/2-preparation/","title":"Chuẩn bị","tags":[],"description":"","content":" Bạn cần tạo một hàm Lambda, một endpoint API Gateway, và một bảng DynamoDB để thực hiện bài lab này.\nĐể bắt đầu với mô hình Serverless trên AWS, bài lab này sẽ hướng dẫn bạn từng bước tạo và tích hợp các thành phần quan trọng như AWS Lambda, API Gateway, và Amazon DynamoDB.\nBạn có thể tham khảo tài liệu chính thức của AWS để hiểu rõ hơn:\nGiới thiệu về AWS Lambda Giới thiệu về Amazon API Gateway Giới thiệu về Amazon DynamoDB Ngoài ra, để hàm Lambda có thể truy cập và làm việc với API Gateway và DynamoDB, bạn cũng cần tạo và gán một IAM Role phù hợp. Vai trò này sẽ cho phép Lambda có quyền đọc/ghi dữ liệu vào DynamoDB và phản hồi thông qua API Gateway một cách an toàn.\nNội dung Tạo DynamoDB Tạo Lambda Tạo API Gateway "},{"uri":"https://baobui166.github.io/My-Workshop/vi/3-observability/3.2-cloudwatch/","title":"Sử dụng Cloudwatch để thu thập dữ liệu và phân tích","tags":[],"description":"","content":"Trong quá trình giám sát ứng dụng trên AWS, chúng ta sẽ sử dụng một loạt công cụ mạnh mẽ của Amazon CloudWatch để thu thập và phân tích dữ liệu hoạt động. CloudWatch Logs cho phép ghi lại nhật ký (logs) từ dịch vụ như API Gateway. Hỗ trợ việc debug và truy vết lỗi. CloudWatch Metrics giúp theo dõi các chỉ số hiệu năng như độ trễ, số lượng request hay tỷ lệ lỗi. Dựa trên các metric này, chúng ta có thể thiết lập Alarm để tự động phát hiện sự cố và kích hoạt cảnh báo qua Amazon SNS đến email hoặc dịch vụ khác. Bên cạnh đó, CloudWatch Log Insights cung cấp công cụ truy vấn mạnh mẽ để phân tích log một cách trực quan và hiệu quả. Cuối cùng, chúng ta sẽ sử dụng CloudWatch Dashboard để tạo bảng điều khiển trực quan, tập trung toàn bộ metric, log và biểu đồ cảnh báo nhằm dễ dàng theo dõi toàn cảnh hoạt động của hệ thống theo thời gian thực.\nNội dung: Phân tích cùng Cloudwatch Log Theo dõi cùng Cloudwatch Metrics Phát hiện sự cố và thông báo lỗi thông qua Alarm và SNS Truy vấn lỗi cùng Log Insight Truy vấn lỗi cùng Clouwatch Log Insights Tạo Dashboard "},{"uri":"https://baobui166.github.io/My-Workshop/vi/3-observability/3.2-cloudwatch/3.2.2-cloudwatchmetrics/","title":"Sử dụng CloudWatch Metrics theo dõi API Gateway","tags":[],"description":"","content":"Sử dụng CloudWatch Metrics theo dõi API Gateway Sử dụng CloudWatch Metrics theo dõi API Gateway trực tiếp trên giao diện AWS Console.\nMục tiêu:\nGiám sát số lượng request, lỗi 4xx, 5xx, độ trễ (latency), integration latency,… của API Gateway Không cần tạo thêm CloudWatch Log group hoặc viết code thủ công Các bước thực hiện:\nTruy cập CloudWatch Đăng nhập AWS Console Gõ CloudWatch vào thanh tìm kiếm \u0026gt; chọn CloudWatch Chọn Metrics \u0026gt; All Metrics Trong menu bên trái, chọn Metrics → click All metrics Ở phần Browse, chọn Lambda: Chọn các metrics cần giám sát: Chọn By Resource Sau đó chọn các function name mà bạn muốn theo dõi (chúng ta sẽ theo dõi 3 thành phần chính đó là: Throttles, Erros, Duration) Theo dõi trên biểu đồ 3 thông số hiển thị trên màn hình:\nDuration: Thời gian thực thi trung bình của Lambda (tính bằng ms) tại mỗi thời điểm. Màu xanh lá cây. Errors: Số lượng lỗi xảy ra tại thời điểm đó. Màu cam. Throttles: Số lượng lần Lambda bị giới hạn (quá số lượng request cho phép).Màu xanh dương nhạt. Khi bạn rê chuột vào điểm dữ liệu lúc 07-30 09:35 UTC, CloudWatch hiển thị:\nDuration: 121.79 ms → Lambda mất ~122ms để thực thi\nErrors: 0.4 → Trung bình có lỗi xảy ra (có thể là 2 lỗi trong 5 request hoặc do làm tròn)\nThrottles: 0 → Không có request nào bị giới hạn tại thời điểm đó\n"},{"uri":"https://baobui166.github.io/My-Workshop/vi/2-preparation/2.2-createlambda/","title":"Tạo Lambda function","tags":[],"description":"","content":"Tạo Lambda function Trong bước này, chúng ta sẽ tạo một AWS Lambda Function, cấu hình đầy đủ các yếu tố như: mã nguồn, quyền truy cập (IAM Role), biến môi trường và test thử hàm để ghi log vào DynamoDB.\nMục tiêu:\nTạo một Lambda function xử lý logic API. Cấu hình IAM Role để Lambda có quyền ghi dữ liệu. Thêm biến môi trường để lưu thông tin kết nối MongoDB (URI, DB name, collection). Viết mã xử lý và deploy trực tiếp. Tạo và chạy một test event. Kiểm tra dữ liệu trong MongoDB. Các bước thực hiện:\nTruy cập Lambda Service: Truy cập AWS Console: AWS console Gõ “Lambda” trong thanh tìm kiếm và chọn dịch vụ AWS Lambda. Tạo Lambda function: Nhấn nút “Create function”.\nChọn Author from scratch.\nNhập thông tin:\nFunction name: GetVisitor. Runtime: Python 3.11. Nhấn Create Function. Deploy mã nguồn Dán mã xử lý sau vào trong khung editor. import json import boto3 from datetime import datetime import urllib.request dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;WebsiteVisitors\u0026#39;) def get_location(ip): try: with urllib.request.urlopen(f\u0026#34;http://ip-api.com/json/{ip}\u0026#34;) as url: data = json.loads(url.read().decode()) return { \u0026#39;country\u0026#39;: data.get(\u0026#39;country\u0026#39;), \u0026#39;region\u0026#39;: data.get(\u0026#39;regionName\u0026#39;), \u0026#39;city\u0026#39;: data.get(\u0026#39;city\u0026#39;), \u0026#39;lat\u0026#39;: data.get(\u0026#39;lat\u0026#39;), \u0026#39;lon\u0026#39;: data.get(\u0026#39;lon\u0026#39;), } except: return {} def lambda_handler(event, context): headers = event.get(\u0026#39;headers\u0026#39;, {}) request_context = event.get(\u0026#39;requestContext\u0026#39;, {}) ip = request_context.get(\u0026#39;identity\u0026#39;, {}).get(\u0026#39;sourceIp\u0026#39;, \u0026#39;unknown\u0026#39;) user_agent = headers.get(\u0026#39;User-Agent\u0026#39;, headers.get(\u0026#39;user-agent\u0026#39;, \u0026#39;unknown\u0026#39;)) visit_time = str(datetime.utcnow()) location = get_location(ip) key = f\u0026#34;{ip}_{user_agent}\u0026#34; if ip != \u0026#39;unknown\u0026#39; else \u0026#39;unknown\u0026#39; try: response = table.get_item(Key={\u0026#39;user_key\u0026#39;: key}) item = response.get(\u0026#39;Item\u0026#39;, {}) if item: item[\u0026#39;count\u0026#39;] = int(item.get(\u0026#39;count\u0026#39;, 0)) + 1 item[\u0026#39;last_visit\u0026#39;] = visit_time else: item = { \u0026#39;user_key\u0026#39;: key, \u0026#39;ip\u0026#39;: ip, \u0026#39;user_agent\u0026#39;: user_agent, \u0026#39;count\u0026#39;: 1, \u0026#39;first_visit\u0026#39;: visit_time, \u0026#39;last_visit\u0026#39;: visit_time, \u0026#39;country\u0026#39;: location.get(\u0026#39;country\u0026#39;), \u0026#39;city\u0026#39;: location.get(\u0026#39;city\u0026#39;), \u0026#39;lat\u0026#39;: str(location.get(\u0026#39;lat\u0026#39;)), \u0026#39;lon\u0026#39;: str(location.get(\u0026#39;lon\u0026#39;)) } table.put_item(Item=item) return { \u0026#34;statusCode\u0026#34;: 200, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; }, \u0026#34;body\u0026#34;: json.dumps({ \u0026#34;message\u0026#34;: \u0026#34;Visitor tracked successfully\u0026#34;, \u0026#34;user_key\u0026#34;: key, \u0026#34;count\u0026#34;: item[\u0026#39;count\u0026#39;] }) } cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) cloudwatch.put_metric_data( Namespace=\u0026#39;VisitorAnalytics\u0026#39;, MetricData=[ { \u0026#39;MetricName\u0026#39;: \u0026#39;TotalVisits\u0026#39;, \u0026#39;Dimensions\u0026#39;: [{\u0026#39;Name\u0026#39;: \u0026#39;Country\u0026#39;, \u0026#39;Value\u0026#39;: location.get(\u0026#39;country\u0026#39;, \u0026#39;Unknown\u0026#39;)}], \u0026#39;Value\u0026#39;: 1, \u0026#39;Unit\u0026#39;: \u0026#39;Count\u0026#39; } ] ) except Exception as e: print(f\u0026#34;Error: {e}\u0026#34;) return { \u0026#34;statusCode\u0026#34;: 500, \u0026#34;headers\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; }, \u0026#34;body\u0026#34;: json.dumps({ \u0026#34;message\u0026#34;: \u0026#34;Error processing request\u0026#34;, \u0026#34;error\u0026#34;: str(e) }) } Sau đó nhấn Deloy. Thêm biến môi trường Chuyển sang tab Configuration, sau đó chọn Environment variables. Nhấn Edit và nhấn Add eviromment variable Sau đó thêm cặp key - value sau: Key: WebsiteVisitors Value: WebsiteVisitors Nhấn save để hoàn tất. Cập nhật IAM Role Chuyển sang tab Configuration, sau đó chọn Environment variables. Sau đó nhấn vào Role name. Sau khi chuyển sang tab role thì chọn Add Permission, sau đó chọn Attch Policies Chọn polices có tên: AmazonDynamoDBFullAccess Sau đó nhấn Add permission. Thực hiện lặp lại các bước trên để tạo thêm 1 lambda function:\nFunction name: createUser. Runtime: Python 3.11. Deloy đoạn code sau. import json import uuid from datetime import datetime import boto3 dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;Users\u0026#39;) cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) def put_custom_metric(metric_name): cloudwatch.put_metric_data( Namespace=\u0026#39;YourApp/Lambda\u0026#39;, MetricData=[{ \u0026#39;MetricName\u0026#39;: metric_name, \u0026#39;Value\u0026#39;: 1, \u0026#39;Unit\u0026#39;: \u0026#39;Count\u0026#39; }] ) def lambda_handler(event, context): print(\u0026#34;Received event:\u0026#34;, json.dumps(event)) try: body = json.loads(event.get(\u0026#39;body\u0026#39;, \u0026#39;{}\u0026#39;)) name = body.get(\u0026#39;name\u0026#39;) email = body.get(\u0026#39;email\u0026#39;) if not name or not email: # Gửi metric cho lỗi Client put_custom_metric(\u0026#39;ClientErrors\u0026#39;) return { \u0026#34;statusCode\u0026#34;: 400, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;message\u0026#34;: \u0026#34;Name and email are required\u0026#34;}) } user = { \u0026#39;user_id\u0026#39;: str(uuid.uuid4()), \u0026#39;name\u0026#39;: name, \u0026#39;email\u0026#39;: email, \u0026#39;created_at\u0026#39;: datetime.utcnow().isoformat() } table.put_item(Item=user) return { \u0026#34;statusCode\u0026#34;: 201, \u0026#34;body\u0026#34;: json.dumps({ \u0026#34;message\u0026#34;: \u0026#34;User created successfully\u0026#34;, \u0026#34;user\u0026#34;: user }) } except Exception as e: print(\u0026#34;Error:\u0026#34;, str(e)) # Gửi metric cho lỗi Server put_custom_metric(\u0026#39;ServerErrors\u0026#39;) return { \u0026#34;statusCode\u0026#34;: 500, \u0026#34;body\u0026#34;: json.dumps({ \u0026#34;message\u0026#34;: \u0026#34;Internal server error\u0026#34;, \u0026#34;error\u0026#34;: str(e) }) } Lặp lại bước thêm IAM Role. Tiếp theo chúng ta sẽ tạo các API Gateway.\n"},{"uri":"https://baobui166.github.io/My-Workshop/vi/3-observability/","title":"Giám sát và theo dõi API với Cloudwatch","tags":[],"description":"","content":"Giám sát và theo dõi API với CloudWatch Trong kiến trúc serverless hiện đại, việc đảm bảo chất lượng dịch vụ không chỉ dừng lại ở khâu triển khai mà còn phụ thuộc rất lớn vào khả năng quan sát (Observability) của hệ thống.\nObservability giúp chúng ta hiểu được những gì đang xảy ra bên trong hệ thống thông qua việc thu thập, phân tích và hiển thị dữ liệu liên quan đến:\nHoạt động Hiệu năng Các lỗi phát sinh Tại sao giám sát lại quan trọng? Hiểu rõ hành vi hệ thống Việc thu thập log, số liệu metrics, và truy vấn thông qua CloudWatch Logs Insight giúp bạn:\nNắm bắt chi tiết quy trình xử lý Hiểu rõ hành vi API và Lambda Dễ dàng xác định nguyên nhân gốc rễ của lỗi Phát hiện và xử lý sự cố kịp thời Tích hợp CloudWatch Alarms với Amazon SNS Gửi email cảnh báo tự động nếu có lỗi hoặc vượt ngưỡng Can thiệp kịp thời trước khi ảnh hưởng đến người dùng cuối Đo lường hiệu suất và tối ưu hóa Theo dõi chỉ số: độ trễ, số request, tỷ lệ lỗi Giúp tối ưu hiệu năng Cải tiến theo SLA (Service Level Agreement) Truy vấn và phân tích nâng cao Dùng Logs Insight để lọc và thống kê log nâng cao Phân tích theo thời gian thực hoặc lịch sử hệ thống Rút ra các bài học vận hành, phát hiện mẫu lỗi định kỳ Nội dung chi tiết 3.1. Chuẩn bị\nChuẩn bị tài nguyên và kích hoạt log/tracing\n3.2. Giám sát API với CloudWatch Metrics\nSử dụng Metrics để theo dõi hiệu suất API Gateway, Lambda\nVới việc kết hợp log, metric, alarm, dashboard và truy vấn nâng cao, bạn sẽ có một hệ thống quan sát mạnh mẽ, chủ động kiểm soát chất lượng dịch vụ API ngay cả khi chạy trong môi trường không máy chủ (serverless).\n"},{"uri":"https://baobui166.github.io/My-Workshop/vi/3-observability/3.2-cloudwatch/3.2.3-cloudwatchalarmsns/","title":"Tạo alarm và SNS","tags":[],"description":"","content":"Tạo alarm và SNS. Sử dụng Amazon CloudWatch Alarm kết hợp với Amazon SNS để gửi thông báo qua email mỗi khi API gặp lỗi áp dụng cho trường hợp API của bạn đang chạy trên môi trường AWS (Lambda, API Gateway, v.v).\nMục tiêu\nGiám sát lỗi (ví dụ: 5XX trong API Gateway, error count trong Lambda). Khi lỗi xảy ra vượt ngưỡng cho phép → gửi email cảnh báo. Các bước thực hiện\nVào CloudWatch Console Chọn Alarms → Create Alarm Chọn Select metric Chọn Lambda → By Resource → Error (Metric name)\nChọn By Resouce Chọn Error (Metric name) Cấu hình các điều kiện để có thể SNS hoạt động mượt mà khi gặp lỗi Tạo SNS mới để sử dụng cho Alarm. Nhập email muốn nhận thông báo cảnh báo vào ô Email endpoint Nhấn Next, sau đó đặt tên cho alarm của chúng ta Sau đó chuyển đến bước cuối cùng review các cấu hình mà mình đã chọn và nhấn Create Lưu ý: nếu bạn muốn tạo alarm cho API Gateway thì ở bước tạo đầu tiên Chọn Select metric → API Gateway → By Stage → Method → 5XXError. Các bước sau lặp lại như trên.\nKết quả nhận qua email khi hệ thống có sự cố: "},{"uri":"https://baobui166.github.io/My-Workshop/vi/2-preparation/2.3-createapigateway/","title":"Tạo API Gateway","tags":[],"description":"","content":"Tạo API Gateway Trong bước này, bạn sẽ tạo một REST API bằng Amazon API Gateway, kết nối nó với Lambda function đã tạo ở bước trước, sau đó deploy ra một endpoint công khai để sử dụng.\nMục tiêu:\nTạo REST API sử dụng API Gateway Tích hợp Lambda function làm backend Cấu hình phương thức (method), resource path` Deploy API ra endpoint công khai Các bước thực hiện\nTruy cập API Gateway Vào AWS Console: https://console.aws.amazon.com/ Gõ “API Gateway” vào thanh tìm kiếm, chọn dịch vụ. Tạo API mới: Nhấn nút “Create API” Chọn loại API:\nChọn REST API (Build) Nhấn Build API detail chọn New API Sau đó đặt tên mà bạn muốn đặt cho API đó -Ví dụ: Visitor Nhấn Create để API Nhấn Created Method để tạo các phương thức cho API Chọn phương thức GET Chọn Lambda function mà bạn đã tạo để gắn cho API Nhấn create để tạo Deloy API Nhấn Deloy API, sau đó cấu hình như sau: Nhấn Deloy. Kiểm thử API đã hoạt động hay chưa Sao chép Invoke URL của API vừa deloy Dán vào cửa sổ trình duyệt mới, sau đó nhấn enter:\nVào DynamoDB để kiểm tra API đã hoạt động hay chưa, nếu thành công thì sẽ có dữ liệu thêm vào cơ sở dữ liệu. Phần tiếp theo chúng ta sẽ bắt đầu thực hiện theo dõi và quan sát các API của chúng ta thông qua Cloudwatch.\n"},{"uri":"https://baobui166.github.io/My-Workshop/vi/3-observability/3.2-cloudwatch/3.2.4-cloudwatchloginsight/","title":"Log Insight","tags":[],"description":"","content":"Quan sát thông qua Log Insight. Mục tiêu\nTheo dõi truy vấn và hiệu suất toàn bộ luồng. Ghi log đúng chuẩn theo structured logging (JSON). Truy vấn log với CloudWatch Logs Insights hiệu quả, tối ưu hiệu suất. Phân tích truy vấn chậm, lỗi 4xx/5xx, DynamoDB throttling, chi phí. Các bước thực hiện\nVào CloudWatch Console Vào CloudWatch → Logs Insights\nChọn log group: /aws/lambda/my-function hoặc /aws/apigateway/\u0026hellip;\nCác Truy vấn Mẫu Logs Insights Cho Lambda Truy vấn các lỗi Lambda (status code 4xx, 5xx)\nfields @timestamp, @message | filter @message like /ERROR/ | sort @timestamp desc | limit 100 Nội dung chính trong log báo lỗi như sau:\nLoại lỗi: [ERROR] ClientError: An error occurred (AccessDenied) when calling the PutMetricData operation.\nMô tả: Lambda function đang cố gắng gọi API PutMetricData của CloudWatch để đẩy dữ liệu metric nhưng bị từ chối truy cập (AccessDenied).\nNguyên nhân: User hoặc vai trò (role) mà Lambda đang sử dụng không có quyền gọi PutMetricData.\nĐịa điểm xảy ra lỗi: Lambda function tên create_user ở vùng ap-southeast-1.\nThông tin khác trong log có: timestamp, account ID, environment, log stream, đoạn mã lỗi traceback trong code Python Lambda.\nThống kê thời gian chạy và tài nguyên Lambda (duration, memory)\nfilter @type = \u0026#34;REPORT\u0026#34; | stats avg(@duration) as AverageDuration, max(@duration) as MaxDuration, min(@duration) as MinDuration, avg(@maxMemoryUsed/1024/1024) as AverageMemoryUsedMB, max(@maxMemoryUsed/1024/1024) as MaxMemoryUsedMB, min(@maxMemoryUsed/1024/1024) as MinMemoryUsedMB AverageDurationMS: Thời gian chạy trung bình của Lambda function trong khoảng thời gian truy vấn (ở đây đang tính theo mili giây).\nMaxDuration: Thời gian chạy tối đa của Lambda function trong khoảng thời gian đó (tính bằng mili giây).\nMinDuration: Thời gian chạy tối thiểu của Lambda function trong khung thời gian đó (ms)\nAverageMemoryUsedMB: Bộ nhớ trung bình Lambda function đã sử dụng trong thời gian chạy, tính theo đơn vị MB.\nMaxMemoryUsedMB: Bộ nhớ tối đa mà Lambda function đã sử dụng trong khoảng thời gian đó (MB).\nMinMemoryUsedMB: Bộ nhớ tối thiểu Lambda function đã sử dụng trong cụm dữ liệu đó (MB).\nPhân tích độ trễ của Lambda (duration) theo thời gian:\nfilter @type = \u0026#34;REPORT\u0026#34; | stats avg(@duration), max(@duration), min(@duration) by bin(5m) Tạo ra các câu lện query thông qua prompt Nhập câu lệnh query bạn mong muốn vào ô Prompt Nhấn Generate new query để tạo câu lệnh, sau đó nhấn run query để chạy câu lệnh: Cold start rate as a percentage of total Lambda invocations "},{"uri":"https://baobui166.github.io/My-Workshop/vi/4-tracingxray/","title":"X-Ray","tags":[],"description":"","content":"Trong hệ thống vi mô (microservices) hoặc serverless hiện đại, các truy vấn thường đi qua nhiều thành phần hoặc các dịch vụ khác nhau. Việc phát hiện \u0026ldquo;request nào đang chậm?\u0026rdquo;, \u0026ldquo;phần nào đang bị tắc?\u0026rdquo;, hay \u0026ldquo;lỗi nằm ở đâu?\u0026rdquo; là rất khó nếu chỉ dùng log.\nAWS X-Ray là công cụ tracing mạnh mẽ giúp: Theo dõi toàn bộ hành trình của một request xuyên suốt các dịch vụ. Hiển thị biểu đồ trực quan (service map) về luồng xử lý và thời gian. Tìm ra nút thắt cổ chai, lỗi, và các truy vấn chậm. Giúp debug production mà không cần xem log thủ công từng phần. Hướng dẫn Cấu hình \u0026amp; Sử dụng AWS X-Ray 1. Bật X-Ray cho Lambda Vào AWS Console → Lambda Chọn function bạn muốn theo dõi Trong phần Monitoring and operations tools, bật Lambda service traces 2. Bật X-Ray cho API Gateway Đã được cấu hình sẵn trong phần Logging and Tracing trước đó (phần 3) 3. Xem biểu đồ Service Map Vào Lambda → chọn function cần quan sát Chọn tab Monitor Chọn View X-Ray Traces 4. Truy vết từng request Vào tab Traces Chọn một trace bất kỳ để xem chi tiết: Trace Flow: Biểu đồ dạng flow mô tả luồng xử lý từ Client → API Gateway → Lambda Request POST tới UserAPI/Create → Lambda xử lý tạo user → Response 201 Hiển thị thời gian xử lý (66ms) và các bước trung gian Segments Timeline: UserAPI/Create (API Gateway Stage): Nhận request POST, xử lý ~48ms Lambda Invoke: Gọi Lambda function create_user, ~44ms Lambda Context: Thực thi logic ~20ms, overhead ~19ms Tổng thời gian phản hồi: ~66ms với mã 201 (thành công) Trace bị lỗi "},{"uri":"https://baobui166.github.io/My-Workshop/vi/5-documentation/","title":"Cách tạo documentation","tags":[],"description":"","content":"Trong AWS API Gateway, Stage đại diện cho một môi trường triển khai cụ thể của API — ví dụ như dev, test, prod. Khi một REST API được tạo và phát triển, bạn cần triển khai (deploy) nó tới một stage để có thể truy cập thông qua endpoint.\nViệc export API từ một stage là thao tác giúp bạn:\nTạo tài liệu OpenAPI (Swagger) đại diện cho toàn bộ cấu trúc API đã triển khai.\nChia sẻ cấu trúc API với frontend team, mobile team, hoặc import sang công cụ như Postman, Swagger UI, Insomnia, v.v.\nPhiên bản hóa API và dễ dàng migrate sang môi trường khác.\nCác bước thực hiện:\nTruy cập AWS API Gateway Vào API Gateway Console Chọn API bạn muốn export (kiểu REST) Trong panel bên trái → Chọn Stages Click vào stage cụ thể (ví dụ: dev, prod) Xác định thông tin Stage Khi bạn chọn một Stage, bạn sẽ thấy:\nInvoke URL: https://{restapi-id}.execute-api.{region}.amazonaws.com/{stage} Tùy chọn log, throttling, caching Đây chính là endpoint người dùng có thể gọi.\nExport OpenAPI của API từ Stage Quay lại màn hình chính của API (không phải stage)\nNhấn vào nút Actions (góc trên bên trái) → chọn Export\nChọn định dạng:\nSwagger / OpenAPI 2\nOpenAPI 3\nTải file .json hoặc .yaml về\nFile này có thể dùng để import sang Postman, Swagger UI hoặc các công cụ tài liệu hóa API. Cách import sang Postman Mở Postman và nhân Import ở góc trái màn hình Kéo thả file vào tải về và nhấn Import Sử dụng API vừa mới import "},{"uri":"https://baobui166.github.io/My-Workshop/vi/3-observability/3.2-cloudwatch/3.2.5-createdashboard/","title":"Tạo Daschboard","tags":[],"description":"","content":"Trong môi trường Serverless hiện đại để xây dựng các ứng dụng phân tán, việc giám sát, theo dõi và chẩn đoán sự cố là vô cùng quan trọng. Để không bị “chìm” trong hàng ngàn dòng log, Amazon CloudWatch Dashboard cung cấp một giao diện trực quan\nMục tiêu\nTheo dõi trạng thái hệ thống theo thời gian thực. Phát hiện vấn đề về hiệu suất hoặc lỗi nhanh chóng. Hiểu rõ hành vi người dùng và tần suất truy cập API. Ra quyết định dựa trên dữ liệu, không phải cảm tính. Dashboard hoạt động như một bản đồ hệ thống thu nhỏ, kết hợp từ nhiều biểu đồ và số liệu, mang lại cái nhìn tổng quan và sâu sát.\nCác bước thực hiện 1. Tạo Dashboard mới Vào CloudWatch Console. Chọn mục Dashboards → Nhấn “Create dashboard”. Đặt tên cho dashboard (ví dụ: MonitoringAPI). Chọn loại widget muốn hiển thị: Line, Number, Bar, hoặc Text. 2. Thêm biểu đồ giám sát API Gateway Loại widget: Line Metric: Chọn API Gateway → By ApiName. Metric: Latency, 4XXError, 5XXError Chọn Statistic: Average → Period: 1 Minute 3. Thêm biểu đồ theo dõi Lambda Loại widget: Line hoặc Number\nMetric:\nService: Lambda Metrics: Duration, Invocations, Errors, Throttles Chọn theo từng function (theo ARN hoặc tên) 4. Thêm biểu đồ DynamoDB Loại widget: Line hoặc Stacked Area\nMetric:\nService: DynamoDB Metrics: ConsumedReadCapacityUnits, ConsumedWriteCapacityUnits, ThrottledRequests Filter theo từng bảng (table name) 5. Tổ chức dashboard Kéo thả các widget để bố trí hợp lý. Đặt tên rõ ràng cho mỗi biểu đồ: “API Error Rate”, “Lambda Duration”, “DynamoDB Usage”, v.v. Sử dụng màu sắc tương phản để dễ nhìn. Lưu lại sau khi hoàn tất. "},{"uri":"https://baobui166.github.io/My-Workshop/vi/6-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Trong phần này, chúng ta sẽ dọn dẹp toàn bộ tài nguyên AWS đã tạo trong quá trình thực hành để:\nTránh phát sinh chi phí không mong muốn. Dọn sạch môi trường thử nghiệm. Đảm bảo tuân thủ quy trình quản lý tài nguyên trên cloud. Xóa Lambda Functions Truy cập AWS Console → Lambda Chọn từng function (ví dụ: create_user, get_user) Chọn Actions → Delete function Nhập tên function để xác nhận và xoá Nếu bạn có nhiều hàm, hãy kiểm tra lại để tránh xoá nhầm các hàm khác.\nXóa API Gateway Vào AWS Console → API Gateway Chọn REST APIs Chọn API bạn muốn xoá (ví dụ: UserAPI) Nhấn Actions → Delete API và xác nhận Sau khi xoá, các endpoint sẽ không thể truy cập được nữa.\nXóa DynamoDB Tables Truy cập AWS Console → DynamoDB Chọn tab Tables Chọn từng bảng (ví dụ: Users) → Actions → Delete Table Xác nhận để xoá Dữ liệu sẽ bị mất vĩnh viễn nếu không có backup.\n"},{"uri":"https://baobui166.github.io/My-Workshop/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://baobui166.github.io/My-Workshop/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]